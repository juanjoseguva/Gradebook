{"ast":null,"code":"import React,{useState,useEffect}from'react';import{confirmAlert}from'react-confirm-alert';// Import\nimport'react-confirm-alert/src/react-confirm-alert.css';// Import css \nimport Button from'@mui/material/Button';import{SERVER_URL}from'../../Constants';// students displays a list of open sections for a course\n// use the URL /sections/open\n// the REST api returns a list of SectionDTO objects\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function CourseEnroll(props){const headers=['CourseId','Section No','Term ID','Building','Meeting Times'];const[sections,setSection]=useState([]);const[message,setMessage]=useState('');const fetchOpenSections=async()=>{try{const jwt=sessionStorage.getItem('jwt');const response=await fetch(\"\".concat(SERVER_URL,\"/sections/open\"),{method:'GET',headers:{'Authorization':jwt}});if(response.ok){const sections=await response.json();setSection(sections);}else{const json=await response.json();setMessage(\"response error: \"+json.message);}}catch(err){setMessage(\"network error \"+err);}};useEffect(()=>{fetchOpenSections();},[]);// the student can select a section and enroll\n// issue a POST with the URL /enrollments?secNo= &studentId=3\n// studentId=3 will be removed in assignment 7.\nconst addCourse=async e=>{const row_idx=e.target.parentNode.parentNode.rowIndex-1;const sectionNo=sections[row_idx].secNo;try{const jwt=sessionStorage.getItem('jwt');const response=await fetch(\"\".concat(SERVER_URL,\"/enrollments/sections/\").concat(sectionNo),{method:'POST',headers:{'Content-Type':'application/json','Authorization':jwt}//              body: JSON.stringify(section),\n});if(response.ok){setMessage(\"course added\");fetchOpenSections();}else{const rc=await response.json();setMessage(rc.message);}}catch(err){setMessage(\"network error: \"+err);}};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Open Sections\"}),/*#__PURE__*/_jsx(\"h4\",{id:\"addMessage\",children:message}),/*#__PURE__*/_jsxs(\"table\",{className:\"Center\",children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsx(\"tr\",{children:headers.map((s,idx)=>/*#__PURE__*/_jsx(\"th\",{children:s},idx))})}),/*#__PURE__*/_jsx(\"tbody\",{children:sections.map(s=>/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:s.courseId}),/*#__PURE__*/_jsx(\"td\",{children:s.secId}),/*#__PURE__*/_jsx(\"td\",{children:s.building}),/*#__PURE__*/_jsx(\"td\",{children:s.room}),/*#__PURE__*/_jsx(\"td\",{children:s.times}),/*#__PURE__*/_jsx(\"td\",{children:/*#__PURE__*/_jsx(Button,{onClick:addCourse,children:\"Add Course\"})})]},s.sectionNo))})]})]});}export default CourseEnroll;","map":{"version":3,"names":["React","useState","useEffect","confirmAlert","Button","SERVER_URL","jsx","_jsx","jsxs","_jsxs","CourseEnroll","props","headers","sections","setSection","message","setMessage","fetchOpenSections","jwt","sessionStorage","getItem","response","fetch","concat","method","ok","json","err","addCourse","e","row_idx","target","parentNode","rowIndex","sectionNo","secNo","rc","children","id","className","map","s","idx","courseId","secId","building","room","times","onClick"],"sources":["/home/juangutierrez/Documents/CST438 - Software Engineering/Gradebook/frontRest/cst438_Assign3/src/components/student/CourseEnroll.js"],"sourcesContent":["import React, {useState, useEffect} from 'react';\nimport { confirmAlert } from 'react-confirm-alert'; // Import\nimport 'react-confirm-alert/src/react-confirm-alert.css'; // Import css \nimport Button from '@mui/material/Button';\nimport {SERVER_URL} from '../../Constants';\n\n// students displays a list of open sections for a course\n// use the URL /sections/open\n// the REST api returns a list of SectionDTO objects\n\nfunction CourseEnroll(props) {\n\n    const headers = ['CourseId', 'Section No', 'Term ID',  'Building', 'Meeting Times'];\n\n    const [sections, setSection] = useState([    ]);\n\n    const [ message, setMessage ] = useState('');\n\n    const fetchOpenSections = async () => {\n        try {\n            const jwt = sessionStorage.getItem('jwt');\n            const response = await fetch(\n                `${SERVER_URL}/sections/open`,\n                {\n                    method: 'GET',\n                    headers: {\n                        'Authorization': jwt\n                    }\n                });\n            if (response.ok) {\n                const sections = await response.json();\n                setSection(sections);\n            } else {\n                const json = await response.json();\n                setMessage(\"response error: \"+json.message);\n            }\n        } catch (err) {\n            setMessage(\"network error \" +err);\n        }\n    }\n\n    useEffect( () => {\n        fetchOpenSections();\n    }, [] );\n\n    // the student can select a section and enroll\n    // issue a POST with the URL /enrollments?secNo= &studentId=3\n    // studentId=3 will be removed in assignment 7.\n\n\n    const addCourse = async (e) => {\n        const row_idx = e.target.parentNode.parentNode.rowIndex - 1;\n        const sectionNo = sections[row_idx].secNo;\n\n        try {\n            const jwt = sessionStorage.getItem('jwt')\n            const response = await fetch (`${SERVER_URL}/enrollments/sections/${sectionNo}`,\n                {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'Authorization': jwt\n                    },\n                    //              body: JSON.stringify(section),\n                });\n            if (response.ok) {\n                setMessage(\"course added\")\n                fetchOpenSections();\n            } else {\n                const rc = await response.json();\n                setMessage(rc.message);\n            }\n        } catch (err) {\n            setMessage(\"network error: \"+err);\n        }\n    }\n\n\n\n    return(\n        <div>\n            <h3>Open Sections</h3>\n            <h4 id=\"addMessage\">{message}</h4>\n            <table className=\"Center\" >\n                <thead>\n                <tr>\n                    {headers.map((s, idx) => (<th key={idx}>{s}</th>))}\n                </tr>\n                </thead>\n                <tbody>\n                {sections.map((s) => (\n                    <tr key={s.sectionNo}>\n                        <td>{s.courseId}</td>\n                        <td>{s.secId}</td>\n                        <td>{s.building}</td>\n                        <td>{s.room}</td>\n                        <td>{s.times}</td>\n                        <td><Button onClick={addCourse}>Add Course</Button></td>\n                    </tr>\n                ))}\n                </tbody>\n            </table>\n        </div>\n    );\n}\nexport default CourseEnroll;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}